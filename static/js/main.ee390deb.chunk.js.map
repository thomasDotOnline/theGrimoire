{"version":3,"sources":["Header.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleNextPage","state","pageNumber","nextPage","setState","axios","method","url","dataResponse","params","format","page","then","res","console","log","data","results","isLoading","handlePrevPage","prevPage","handleClick","event","database","ref","push","handleRemove","spellBookKey","child","remove","spellBook","this","on","response","newState","val","key","spellData","className","map","spellRes","name","desc","onClick","spell","slug","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee390deb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n    render() {\n        return (\n        <>\n        <header>\n            <h1>Connected</h1>\n        </header>\n        </>\n    );\n    }\n}\n\nexport default Header;","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC28nhXgkOpxuKLY2VBacsOML7V8ZhKx4s\",\n    authDomain: \"spellbook-38955.firebaseapp.com\",\n    databaseURL: \"https://spellbook-38955.firebaseio.com\",\n    projectId: \"spellbook-38955\",\n    storageBucket: \"spellbook-38955.appspot.com\",\n    messagingSenderId: \"66976700318\",\n    appId: \"1:66976700318:web:c1eb9d363152aef6e1a88f\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Header from \"./Header.js\";\nimport firebase from \"./firebase.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      isLoading: true,\n      pageNumber: 1,\n      spellBook: [],\n    };\n  }\n\n  componentDidMount() {\n    axios({\n      method: \"GET\",\n      url: \"https://api.open5e.com/spells/\",\n      dataResponse: \"json\",\n      params: {\n        format: \"json\",\n        page: this.state.pageNumber,\n      },\n    }).then((res) => {\n      console.log(res);\n      this.setState({\n        data: [...res.data.results],\n        isLoading: false,\n      });\n    });\n\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (response) => {\n      const newState = [];\n      const data = response.val();\n\n      for (const key in data) {\n\n        newState.push({\n          key: key,\n          spellData: data[key],\n        });\n      }\n\n      this.setState({\n        spellBook: newState,\n      });\n      console.log(newState);\n    });\n  }\n\n  handleNextPage = () => {\n    if ((this.state.pageNumber > 1, this.state.pageNumber < 7)) {\n      const nextPage = this.state.pageNumber + 1;\n      this.setState({\n        pageNumber: nextPage,\n      });\n    }\n    axios({\n      method: \"GET\",\n      url: \"https://api.open5e.com/spells/\",\n      dataResponse: \"json\",\n      params: {\n        format: \"json\",\n        page: this.state.pageNumber,\n      },\n    }).then((res) => {\n      console.log(res);\n      this.setState({\n        data: [...res.data.results],\n        isLoading: false,\n      });\n    });\n  };\n\n  handlePrevPage = () => {\n    if ((this.state.pageNumber < 7, this.state.pageNumber > 1)) {\n      const prevPage = this.state.pageNumber - 1;\n      this.setState({\n        pageNumber: prevPage,\n      });\n    }\n    axios({\n      method: \"GET\",\n      url: \"https://api.open5e.com/spells/\",\n      dataResponse: \"json\",\n      params: {\n        format: \"json\",\n        page: this.state.pageNumber,\n      },\n    }).then((res) => {\n      this.setState({\n        data: [...res.data.results],\n        isLoading: false,\n      });\n    });\n  };\n\n  handleClick = (event) => {\n    const dbRef = firebase.database().ref();\n    dbRef.push(event);\n  };\n\n  handleRemove = (spellBookKey) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(spellBookKey).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <Header />\n\n\n\n        <div className=\"spellBookContainer\">\n          <div className=\"spellBook\">\n            {this.state.isLoading ? (\n              <p>Loading...</p>\n            ) : (\n              this.state.spellBook.map((spellRes) => {\n                return (\n                  <div key={spellRes.key} className=\"spellBookItem\">\n                    <h2>{spellRes.spellData.name}</h2>\n                    <p className=\"description\">{spellRes.spellData.desc}</p>\n                    <button onClick={() => this.handleRemove(spellRes.key)}>\n                      Remove\n                    </button>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </div>\n\n        <div className=\"spellsContainer\">\n          <div className=\"contentContainer\">\n            <button\n              onClick={() => {\n                this.handlePrevPage();\n              }}\n            >\n              previous page\n            </button>\n            <button\n              onClick={() => {\n                this.handleNextPage();\n              }}\n            >\n              next page\n            </button>\n            <div className=\"spells\">\n              {this.state.isLoading ? (\n                <p>Loading...</p>\n              ) : (\n                this.state.data.map((spell) => {\n                  return (\n                    <div\n                      className=\"spellCard\"\n                      onClick={\n                        (() => this.handleClick(spell.name),\n                        () => this.handleClick(spell))\n                      }\n                      key={spell.slug}\n                      // className=\"spellCard\"\n                    >\n                      <h2>{spell.name}</h2>\n                      <p className=\"description\">{spell.desc}</p>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}