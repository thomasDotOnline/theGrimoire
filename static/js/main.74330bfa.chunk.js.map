{"version":3,"sources":["Header.js","Footer.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Footer","href","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleClick","event","database","ref","child","state","userId","push","handleRemove","spellBookKey","remove","getSpells","page","axios","method","url","dataResponse","params","format","pageNumber","then","res","setState","data","results","isLoading","handleNextPage","nextPage","handlePrevPage","prevPage","spellBook","this","on","response","newState","val","user","users","key","spellData","auth","signInAnonymously","catch","error","errorCode","code","errorMessage","message","console","log","onAuthStateChanged","isAnonymous","uid","map","spellRes","name","level","range","desc","onClick","spell","slug","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74330bfa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n    render() {\n        return (\n          <>\n            <header>\n              <h1>the grimoire</h1>\n              <div className=\"headerContainer\">\n                <p>\n                  Push the \"Transcribe\" button (found at the bottom of each\n                  spell card found in the compendium) to add a spell to your\n                  personal spellbook.\n                </p>\n                <p>\n                  In your spell book you may push the \"Remove\" button (found at\n                  the bottom of each spell card found in Your Spellbook) to take\n                  a spell out of your spellbook\n                </p>\n              </div>\n            </header>\n          </>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react'\n\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n\n            <p> Created @\n                <a href=\"https://junocollege.com/\">Juno College</a>\n            </p>\n\n            </footer>\n        );\n    }\n}\n\nexport default Footer","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC28nhXgkOpxuKLY2VBacsOML7V8ZhKx4s\",\n    authDomain: \"spellbook-38955.firebaseapp.com\",\n    databaseURL: \"https://spellbook-38955.firebaseio.com\",\n    projectId: \"spellbook-38955\",\n    storageBucket: \"spellbook-38955.appspot.com\",\n    messagingSenderId: \"66976700318\",\n    appId: \"1:66976700318:web:c1eb9d363152aef6e1a88f\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Header from \"./Header.js\";\nimport Footer from \"./Footer.js\"\nimport firebase from \"./firebase.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      isLoading: true,\n      pageNumber: 1,\n      spellBook: [],\n      userId: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // axios call\n    axios({\n      method: \"GET\",\n      url: \"https://api.open5e.com/spells/\",\n      dataResponse: \"json\",\n      params: {\n        format: \"json\",\n        page: this.state.pageNumber,\n      },\n    }).then((res) => {\n      this.setState({\n        data: [...res.data.results],\n        isLoading: false,\n      });\n    });\n\n    // firebase logic start \n\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (response) => {\n      const newState = [];\n      const data = response.val();\n      if (data) {\n        const user = data.users[this.state.userId];\n\n        for (const key in user) {\n          newState.push({\n            key: key,\n            spellData: user[key],\n          });\n        }\n\n        this.setState({\n          spellBook: newState,\n        });\n      }\n    });\n\n    firebase\n      .auth()\n      .signInAnonymously()\n      .catch(function (error) {\n        // Handle Errors here.\n        let errorCode = error.code;\n        let errorMessage = error.message;\n        // ...\n        console.log(errorCode);\n        console.log(errorMessage);\n      });\n\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        let isAnonymous = user.isAnonymous;\n        let uid = user.uid;\n\n        this.setState({\n          userId: uid,\n        });\n        // ...\n      } else {\n        // User is signed out.\n        // ...\n      }\n      // ...\n    });\n  }\n  handleClick = (event) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(\"users\").child(this.state.userId).push(event);\n  };\n\n  handleRemove = (spellBookKey) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(\"users\").child(this.state.userId).child(spellBookKey).remove();\n  };\n\n  // firebase logic end\n\n  // page change logic start\n  getSpells = (page) => {\n    axios({\n      method: \"GET\",\n      url: \"https://api.open5e.com/spells/\",\n      dataResponse: \"json\",\n      params: {\n        format: \"json\",\n        page: this.state.pageNumber,\n      },\n    }).then((res) => {\n      this.setState({\n        data: [...res.data.results],\n        isLoading: false,\n      });\n    });\n  };\n\n  handleNextPage = () => {\n    if ((this.state.pageNumber > 1, this.state.pageNumber < 7)) {\n      const nextPage = this.state.pageNumber + 1;\n      this.setState(\n        {\n          pageNumber: nextPage,\n        },\n        () => {\n          this.getSpells(nextPage);\n        }\n      );\n    }\n  };\n\n  handlePrevPage = () => {\n    if ((this.state.pageNumber < 7, this.state.pageNumber > 1)) {\n      const prevPage = this.state.pageNumber - 1;\n      this.setState(\n        {\n          pageNumber: prevPage,\n        },\n        () => {\n          this.getSpells(prevPage);\n        }\n      );\n    }\n  };\n  // page change logic end\n\n  render() {\n    return (\n      <div>\n        <div className=\"App wrapper\">\n          <Header />\n          {/* spellbook rendered from firebase */}\n          <div className=\"spellBookContainer\">\n            <h2>Your Spellbook</h2>\n            <div className=\"spellBook\">\n              {this.state.isLoading ? (\n                <p>Loading...</p>\n              ) : (\n                this.state.spellBook.map((spellRes) => {\n                  return (\n                    <div key={spellRes.key} className=\"spellBookItem\">\n                      <div className=\"spellContent\">\n                        <h3>{spellRes.spellData.name}</h3>\n                        <h4>{spellRes.spellData.level}</h4>\n                        <h4>{spellRes.spellData.range}</h4>\n                        <p className=\"description\">{spellRes.spellData.desc}</p>\n                        <button onClick={() => this.handleRemove(spellRes.key)}>\n                          Remove\n                        </button>\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n\n          <div className=\"spellsContainer\">\n            <div className=\"buttonContainer\">\n              {/* axios page change */}\n              <button\n                onClick={() => {\n                  this.handlePrevPage();\n                }}\n              >\n                previous page\n              </button>\n              <button\n                onClick={() => {\n                  this.handleNextPage();\n                }}\n              >\n                next page\n              </button>\n            </div>\n            <div className=\"contentContainer\">\n              <h2>Compendium of Spells</h2>\n              {/* axios call render */}\n              <div className=\"spells\">\n                {this.state.isLoading ? (\n                  <p>Loading...</p>\n                ) : (\n                  this.state.data.map((spell) => {\n                    return (\n                      <div className=\"spellCard\" key={spell.slug}>\n                        <div className=\"spellContent\">\n                          <h3>{spell.name}</h3>\n                          <h4>{spell.level}</h4>\n                          <h4>{spell.range}</h4>\n                          <p className=\"description\">{spell.desc}</p>\n                          <button\n                            onClick={\n                              (() => this.handleClick(spell.name),\n                              () => this.handleClick(spell))\n                            }\n                          >\n                            Transcribe\n                          </button>\n                        </div>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}